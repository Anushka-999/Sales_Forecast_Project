!pip install pandas numpy matplotlib scikit-learn

# Load and Inspect Data
import pandas as pd
# Load datasets
stores_df = pd.read_csv("stores data-set.csv")
features_df = pd.read_csv("Features data set.csv")
sales_df = pd.read_csv("sales data-set.csv")
# Convert Date columns to datetime format
features_df["Date"] = pd.to_datetime(features_df["Date"], dayfirst=True)
sales_df["Date"] = pd.to_datetime(sales_df["Date"], dayfirst=True)
# Display first few rows
stores_df.head(), features_df.head(), sales_df.head()

# Merge datasets
df = sales_df.merge(features_df, on=["Store", "Date"], how="left").merge(stores_df, on="Store", how="left")
# Display merged dataset
df.head()

# Handle Missing Values
# Fill missing markdown values with 0
df.fillna({"MarkDown1": 0, "MarkDown2": 0, "MarkDown3": 0, "MarkDown4": 0, "MarkDown5": 0}, inplace=True)
# Fill missing CPI and Unemployment with median
df.loc[:, "CPI"] = df["CPI"].fillna(df["CPI"].median())
df.loc[:, "Unemployment"] = df["Unemployment"].fillna(df["Unemployment"].median())

# Check Sales Trends Over Time
import matplotlib.pyplot as plt
# Aggregate weekly sales
df_grouped = df.groupby("Date")["Weekly_Sales"].sum()
# Plot sales trend
plt.figure(figsize=(12,5))
plt.plot(df_grouped.index, df_grouped.values)
plt.xlabel("Date")
plt.ylabel("Total Sales")
plt.title("Sales Trend Over Time")
plt.show()

# Store Performance Analysis
# Top 5 performing stores
top_stores = df.groupby("Store")["Weekly_Sales"].sum().sort_values(ascending=False).head(5)
print(top_stores)

# Save processed data for Power BI
df.to_csv("processed_sales_data.csv", index=False)


# Train a Regression Model
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
# Verify available columns
print(df.columns)
# Select features
features = ["Store", "Dept", "Temperature", "Fuel_Price", "CPI", "Unemployment", "IsHoliday_x","IsHoliday_y"]
X = df[features]
y = df["Weekly_Sales"]
# Convert categorical data
X = pd.get_dummies(X, drop_first=True)
# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Train model
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
# Predict and evaluate
y_pred = model.predict(X_test)
print("Mean Absolute Error:", mean_absolute_error(y_test, y_pred))

# Forecast Future Sales
import numpy as np
# Predict future sales
future_dates = pd.date_range(start="2023-01-01", periods=12, freq="W")
future_data = X_test.sample(12, random_state=42)  # Using sample as new data
future_sales = model.predict(future_data)
# Display results
forecast = pd.DataFrame({"Date": future_dates, "Predicted_Sales": future_sales})
print(forecast)
